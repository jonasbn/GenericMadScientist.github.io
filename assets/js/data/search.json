[ { "title": "How CHOpt works", "url": "/posts/how-chopt-works/", "categories": "Clone Hero", "tags": "", "date": "2022-06-06 19:26:00 +0100", "snippet": "When I made this blog I envisioned myself talking about how other people’sprograms work. However, I’ve had plenty of people ask me how my own programCHOpt works, so today I’m going to talk about that.As a quick note, I’m not going to go over my specific classes and functionsbecause that would be boring and then I’d potentially have to update this.Instead I will go over the algorithm in broad strokes, pointing out somecomplications that have to be dealt with. Lastly, I will only be discussingguitar: drums has some details that I do not consider to be stable as ofwriting, and at any rate once you understand the core algorithm it’s not hard totweak it for drums. The same remark applies to precision mode.OverviewClone Hero is a Guitar Hero clone first released in 2017. I’mgoing to assume you’ve played it before; while I’ll go over the key facts aboutthe engine shortly, I’m not going to introduce the core gameplay modes andmechanics.However, one mechanic I will single out is Star Power. Star Power (henceforthabbreviated as SP) is accumulated over the course of the song and can bedeployed once you have a sufficient amount. For its duration, the amount ofpoints gained is doubled. This means that if you want to get the best possiblescore, you will have to activate SP at specific times. A plan to activate SP atspecific times is called a path. CHOpt’s purpose is to find the optimal path fora given song.Review of Clone Hero’s engineThe details of how SP works is somewhat uncommon knowledge, so here’s what you’dneed to know to implement CHOpt. The player has a bar or tank of SP. If the baris at least half-full, you can activate at will. Surplus SP above a full bar isdiscarded. Once activated, SP will remain active as the bar depletes, all theway until the bar is empty at which point SP ends.SP is acquired from so-called SP phrases. A phrase is a sequence of star-shapednotes. Provided the full sequence is comboed, upon hitting the last note of itone quarter of the bar will be filled. Any sustain notes in the phrase can bewhammied for additional SP. Such sustains are called SP sustains. Whammying isbinary: as far as the game concerns, you are either whammying or you are not.Whammying more vigorously does not award additional SP.The amount of SP gained while whammying is down to how long you have beenwhammying. But time is not measured here in seconds, it is measured in quarternotes. For most songs this is equivalent to a beat, but not always. For example,if a song is in 7/8 time and you whammy for a measure, you get the whammy for3.5 quarter notes rather than 7. SP gained from whammying is gainedcontinuously, so you can start and stop whammying mid-sustain if the path callsfor it. One quarter note of whammy fills 1/30th of the bar. Therefore, if youwant to be able to activate after getting one phrase, that phrase must have atleast 7.5 quarter notes of whammy.Unlike whammy, SP duration is a function of time in measures. A full bar of SPlasts 8 measures, a half bar lasts 4 measures, and so on. An activation can beextended by hitting additional SP phrases and whammying SP sustains while SP isactive. This provides an illustration of the distinction between how SP fromwhammying is awarded and SP duration. If you have a long SP sustain in 4/4 time,SP is active, and you are whammying, you will slowly gain SP at the rate of1/120th of the bar per measure. If instead the time signature is 6/4, you willgain SP at the rate of 3/40ths of the bar per measure. Contrast this with whenthe time signature is 3/4 or 6/8, where you will lose SP at the rate of 1/15thof the bar per measure.The other key ingredient is squeezing. In Clone Hero, you can hit notes up to70ms early or up to 70ms late.1 This can be abused to get even more notesunder SP, by being able to activate later while still getting the first noteunder SP and being able to squeeze in an extra note (possibly more) at the end.There are other rare circumstances where squeezing is useful in less obviousways. The primary one is reverse squeezing. In that situation, you want toactivate as soon as possible to not get the last note of a subsequent SP phraseunder SP so it can be utilised for a later activation rather than prolonging thecurrent one. You can buy yourself some more room by hitting the last note of theprior SP phrase early to activate even earlier, and hitting the last note of thesubsequent phrase late. Sometimes this additional room is critical for making apath possible.Abusing the timing window combines with SP sustains to give rise to earlywhammy. This is where you hit SP sustains early so you can start getting SP fromwhammy sooner. Clone Hero does nothing to disable SP accumulation from whammybefore the note’s time, nor does it affect when the sustain ends. Thus thisgrants you more SP. For many songs, good early whammy is the biggest componentof a good FC score from a path.Lastly some words on sustains. Sustains continuously grant you points for theirduration. Roughly speaking2, you get one point per 1/25th of a quarternote3, which is then multiplied by your current multiplier. So if you have a4x multiplier, your score will go up in 4s during a sustain. Each such incrementis called a tick.4 Changing multiplier (like due to activating SP) betweenticks does not break up their atomic nature: you would go from +4s to +8s. Thetime you get the tick isn’t affected by hitting the note early or late, unlessthe tick is close to the note and you hit the note later than the tick. In thatcase, all ‘overdue’ ticks are collected the moment you hit the note. It’s alsoimportant to know that the last ticks of a sustain are grouped togetherapproximately a quarter of a quarter note before the end of the sustain. Soholding a sustain for the maximum amount of time is only crucial for gettingmaximum SP from SP sustains.An example songRather than describe the algorithm in the abstract, let’s look at a simpleexample chart I made. To keep things simple, this song has no squeezing and nowhammy, and is just complicated enough to allow us to focus on the coreprinciples. We’ll start by coming up with an inefficient way of working out thepath, then refine it.Green regions are SP phrases. The 32 notes at the start are just to make sure weget to 4x before the first SP phrase, meaning we can ignore multipliers.We shall start with a relatively straightforward recursive algorithm, startingfrom the beginning of the song. The earliest activation we can do takes us fromthe green in m3 to the yellow in m6. This activation gives us 3000 points. Then,the soonest second activation we can do after that goes from the yellow in m22to the green in m28 (this is possible because we can reverse squeeze).This activation gives us 4400 points, so in total the path gives us 7400 points.If we did this path, then adding on the no SP FC score of 19150 would give us atotal score of 26550. However, for every path the no SP FC score is going to bethe same so there’s no reason to add it on until the very end when we give theuser the estimated score.Now obviously in general activating the instant we can is not going to beoptimal. So this is where the recursion comes in. Let’s say we do the same firstact. We’ll try the next possible second act, which in this case is the yellow inm22 to the red in m28. This grants 4600, so in total the path gives 7600 points.A sure improvement. Then we try the next second activation, yellow in m22 to theyellow in m28. This gives 4800, so a better path still. We cannot go from theyellow in m22 to the blue in m28, so now we move the beginning up a note.Our next act would therefore be from the blue in m22 to the red in m28. Now wecould calculate this, but you might have realised we don’t need to. See, wealready did m22 yellow to m28 red, which is going to be strictly better sincewe’re starting on an earlier note and ending on the same note. Similarly we canrule out going from the m22 blue to the m28 yellow, and go straight to the actthat goes from the m22 blue to the m28 blue. Calculating this gives us 4800 sojust as good as our previous best path. Carrying along with this procedure, wego all the way to the end and discover that with our given first activation, thebest second activation is from the green in m23 to the chord in m29. This gives5000, so we now have a path that gives us 8000 points.Now we go back and look at the first act again. We were starting with m3 greento m6 yellow. The next possible first act is m3 green to m7 green. This givesus 3200. Then we redo the step we did with the second activation to find thebest matching second activation. Again, this turns out to be m23 green to m29chord, which is 5000, so this path gives us 8200 points.For our third potential first act, we do m3 red to m7 red… right? Except thisisn’t possible, for the m7 red is the last note of a phrase and so extends ouractivation. Therefore, the true next activation we need to consider is m3 red tom9 green, which awards 4600 points. Then we have to find the best secondactivation that fits this. This search starts with m24 yellow to m28 red andends with m25 green to m29 chord. It turns out the best of these is m25 green tom29 chord which gives 3600 points. In total this path is worth 8200 points.Then we do as first act m3 red to m9 red, and so on. Eventually this algorithmleads us to the finished product, our optimal path.Activations are denoted with blueBut why repeat yourself?We have in our hands a basic algorithm that gets the job done, although it’svery inefficient. The next step is to make it respectable.Notice that with the first two possibilities for the first activation, we gotthe same answer for the rest of the path. This is because both of thoseactivations ended before the same phrase. Therefore whatever the bestcontinuation of the path will be for one of them, it’ll be the same for theother. This observation is incredibly powerful and lets us dramatically improveour algorithm.Once we’ve added an activation to the path, we count how many SP phrases areleft in the song. If we’ve not already ended up in this situation, we diligentlywork out the optimal way to use that number of SP phrases. We then, crucially,store this information in some data structure of choice. If we have been in thissituation before, though, then we know the answer and have it saved already. Sowe just retrieve the answer and append it to the end of the path.This is a classic example of dynamic programming since weare using the solution to subproblems in order to solve our overall problem. Thespeedup is as dramatic as one typically gets from such insights. Done correctly,this is enough to get a usable optimiser.To illustrate how effective this is, here is a sketch of what happens when weapply this to our example chart. Our initial first activation is m3 green to m6yellow. Exactly as we did initially, we work out that the best way to use theremaining SP is to go from m23 green to m29 chord. This is the best way to usethree remaining phrases. In total this path gives 8000 points.Then we start with m3 green to m7 green, which also has three remaining phrases.So we use the answer to this subproblem we have, and now we have a path thatgives 8200 points. Then we do m3 red to m9 green. Now we have two phrases left,and work out that these are best used to do m25 green to m29 chord. In totalthis path is also worth 8200 points. Next we do m3 red to m9 red, and are leftwith two again. Tacking that on, we get 8400 points. We keep going until we trym8 green to m14 chord, which combined with the last two phrases gives 8800points.Once we go forward a bit more, we end up not finding anything better before westart overlapping more phrases. Now we will end up with one or zero phrasesleft, not enough to give us an extra activation so the only thing we can do withthem is nothing. Carrying on until we’re done with the song, we find the optimalpath is the 8800 points one mentioned already and shown above.One feature of this technique not apparent with this example comes into playonce we have more than two activations. For we don’t just use this optimisationto handle the last activation. We can use it for the rest of the path, and evenwhen working out the rest of the path for the first time, we end up accumulatinglots of information to speed up even that process.Another way you could make use of this insight is to work backwards. Start withthe best way to use the last phrase: do nothing. Then go back and work out thebest way to use the last two phrases. Then the last three, and so on, back andback until we’ve got to the start.However, CHOpt goes with the recursion and memoisation approachfor two main reasons. The first is that not all subproblems end up coming up. Inour example, calculating the optimal way to use the last four phrases would be awaste of time since we can never arrive this situation. This point becomesstronger once we consider the effect of SP sustains, which I will discuss in amoment. The other reason is because it would complicate the second significantoptimisation, which I will get to in a while.Why it’s not so simpleIn our example, we were able to get by with only counting the number ofremaining phrases. But obtaining a full phrase is only one way to acquire SP. Wecan also get SP by whammying SP sustains. This immediately raises a problem:what if an activation ends in the middle of a phrase and covers some but not allof the constituent SP sustains?An activation ending mid-phraseIt is clear that merely counting the number of remaining phrases is far toocrude. Perhaps we can only apply the optimisation in the case the activationends before the next phrase starts? This would work provided we require theactivation end at least 70ms before the next phrase starts, so we have the fullamount of early whammy available. But this retreat gives up too much:activations ending mid-phrase are very common in optimal paths, and the vastmajority of songs have the potential for them. And so long as the potential isthere, we have to contend with it, even if in the end it may not turn out to bepart of the optimal path. One could tweak this so our rule is that the act endsat least 70ms before the first SP sustain in the phrase, but this would be ofonly marginal assistance.No, instead we must work out how to accommodate this properly. Think back tosaving the subpaths. A natural way to view the structure used for this is adictionary. The key is the number of remaining phrases, the value is the optimalway to utilise them.5 The problem is with our key, and that way lies thesolution. We refine the key by making it a tuple of both the number of remainingphrases, and the number of remaining quarter notes of SP sustain left in thesong. More simply, we can store this information as a position, taking theposition the act ended and then moving it forward to 70ms before the next phraseif we are not already mid-phrase.6Actually, it turns out to be better to use as key a tuple of position and thefirst point not under the act (moving this point forward like the position in asimilar way). The main issue with just using a position is it adds acomplication when SP runs out just after the last note of an SP phrase, and wehit said note late to not overlap. Using the position alone we would have to addin an auxiliary calculation that we are not far enough ahead to have hit the SP,and this is messy (messy and not even correct7). The majority of the time,this has the same effect as just using position so the extra strictness of ourkey does not cost us dearly in performance.The second optimisationWith this optimisation done well, and taking some time with a profiler to findout what you’ve done poorly, you can get very far. Indeed, for a good while thisis the position CHOpt was in. But then it starts getting viable to throw fullalbums at your optimiser, and while they generally do get handled, they take awhile. Wouldn’t it be nice to have an idea that helps with these dramatically,while also helping with more typical charts?Let’s think a little about what happens when we throw in a long chart. We’llrevert to our earlier version where we only counted the number of remainingphrases, a song with no squeezes or SP sustains. Let’s also assume our SPphrases are distributed roughly evenly, as is typical. Let \\(N\\) denote thelength of our song (the specific units deliberately left vague) and \\(k\\) thenumber of SP phrases.We will almost definitely have to work out what to do with the last two phrases.This entails, at a minimum, working out what to do starting with every pointafter the last phrase. This will take time roughly proportional to\\({N/(k + 1)}\\).For the last three phrases, we will have to consider an activation starting withevery point after the second last phrase, taking time roughly proportional to\\({2N/(k + 1)}\\). Similarly we go back and back to considering all but the firstphrase (and we are likely to need to consider all these subproblems), giving usthe sum\\[ ((k - 1) + (k - 2) + \\cdots + 1)N/(k + 1)\\]This comes out to \\(O(kN)\\). For typical charts the number of SP phrases isroughly proportional to \\(N\\), so at a bare minimum we’re talking \\(O(N^2)\\).What can we do?It turns out that in the process of doing this we will be repeating ourselves.Say our song has 100 phrases, and we want to work out what to do with the last30 and the last 50 phrases. Once we are up to the last 26 phrases, in both caseswe already have a full bar. From then on, the rest will be exactly the same. Andso we have another opportunity for memoisation.The trick is, when doing this process, track once you have acquired four SPphrases. At this point your bar is already full, and at that position it doesn’tmake a difference if you have already collected four phrases or nine. So oncewe’re up to this point, from then on we find the best way to finish the path. Wethen store this in a data structure reserved for telling us the best way tofinish the path if we are up to a certain position and we must already have afull bar. Then, in our 100 phrase song, when we start with the last 50 phraseswe are likely done once we’ve collected five phrases, for then we can probablyrely on the result we got up to this point when calculating the result for thelast 49 phrases.If you run through the back-of-the-envelope calculation above with this newoptimisation, you get \\(O(N)\\). Since this is a lower bound, this is not to sayCHOpt itself is linear: in fact that is definitely not the case because it doessorts and many \\({O(\\log N)}\\) operations. But the calculation conveys quitewell the savings on offer.Looking aheadAfter spending the time to make CHOpt nice and speedy, it’s tempting to try andmake it even faster. But is there much point?For typical songs, CHOpt now finds the optimal path so quickly that the majorityof the time is spent in libpng saving the image. Making the process of findingthe optimal path 50% faster would barely matter, and besides, it’s fast enoughthat for most charts users barely have to wait at all. While the image savingbottleneck might potentially be addressed by saving as SVG, PNG files are justfar more convenient and it starts to feel silly at that level.One major problem is exhibited by NFL on Fox Theme fromCarpal Tunnel Hero 3. It’s a mostly slow ha ha funny meme chart thatends with an insanely high BPM SP sustain and CHOpt’s major optimisations don’thelp here. To a human, the optimal path is easy to see. You can remove the bigsustain and the path you get would overlap the start of it anyway, so theoptimal path is to do that then just keep whammying until the song ends. It’sless clear how to devise a general way to spot this without some horriblehard-coding.I think the way to go is to look again at the second optimisation and improveit. It doesn’t apply here because we just have the one phrase, and we can’t justchange it to being able to get a full bar because on some songs it’s optimal tonot always whammy SP sustains. But I feel it should be possible to tweak it bydividing into five, according to having zero, one, two, three, or at least fourphrases, and in all such cases being able to full bar if desired. This shouldbring NFL on Fox Theme under control; well in a theoretical sense anyway. It’sobvious what the optimal path is, and the sustain is so long that the image fileis too big to work.Long SP sustains have been a thorn in CHOpt’s side before. Back when I made theoriginal version, Sweating Bullets from Guitar Hero 5 was a big pain. Then I gotit under control, and things were mostly fine until encountering Time Travelerfrom Circuit Breaker.This happens twice, by the wayThat aside, it would be nice to add support for other games and engines. CHOpthas support for Rock Band 3 guitar, and Clone Hero drums before it got changedagain. I’m especially interested in the older Guitar Hero games and Warriors ofRock (including power-ups). While there are many differences between theseengines, I am confident the core algorithm with these optimisations is robustenough to accommodate them.Something else I’d like to do at some point is allow CHOpt to find paths thatinvolve missing or overstrumming, when that’s optimal. Incredibly rare, but I amaware of one example in Clone Hero where this is the case with a chart not madespecifically to exhibit this behaviour. This would require a slight change tothe algorithm, where the key for the dictionary would have to also include thecombo. Because the combo can be capped once the multiplier reaches 4x, thisshouldn’t be as bad as it might sound. On guitar, with no modifiers on. There is a wrinkle here: you can strumnotes even earlier than 70ms without overstrumming or missing, and the gamewill register the note once the note is 70ms ahead. Matt, the lead developerof Clone Hero, has told me this leniency window is 50ms. This is usefulknowledge for executing paths but does not affect whether the note can behit under SP, so for the purpose of implementing CHOpt it is irrelevant. &#8617; Due to a bug that cannot be fixed for backwards compatibility, the exactspacing between ticks depends on the resolution of the chart or midi. Ishall not go into the details here, suffice to say that for your typical.chart chart it’s closer to 27.4 ticks per quarter note, and for yourtypical .mid chart it’s around 25.3 ticks per quarter note. &#8617; I am ignoring extended sustains, but that makes no essential difference inwhat follows. &#8617; Ticks aren’t a concept in Clone Hero’s code, the behaviour is entirely aconsequence of rounding. However, they’re an invaluable fiction and sincethey perfectly reproduce the game’s behaviour, the little lie is harmless. &#8617; One should also store the number of points granted to save having torecalculate it, but this is besides the point. &#8617; I am glossing over some details of the calculation of the right position forthe sake of clarity, but when implementing this these details become clear.There is further room for some tweaks here, but I do not feel them importantor interesting enough to warrant discussion here. &#8617; If the BPM is insanely high, the position need not tell us the number ofremaining phrases. For instance, with a BPM of 13714 we get that four 4/4measures take up just under 70ms. In general a very high BPM can give riseto lots of thorny problems due to breaking reasonable assumptions about theorder of the times events can happen. I have not focused on them too muchsince they are so artificial, so if someone wanted to find mistakes in CHOptthis would be an excellent area to focus on. &#8617; " }, { "title": "How Pokémon Stadium 2 utterly fouls up team selection", "url": "/posts/ps2-ai-teams/", "categories": "Pokémon Stadium 2", "tags": "", "date": "2022-01-24 15:19:00 +0000", "snippet": "Alternative title: how to be passive aggressive with asterisks.OverviewIn Pokémon Stadium 2 the vast majority of battles have you and your opponentbring a team of six. From there, both sides choose a subset of three to bring.This post is on how the game decides which subset of three to bring and mydescent into madness brought about by trying to understand the implications ofall the mistakes the programmers made. To check my understanding of this and toprovide a helpful tool for determining the effect of the player’s choice ofrentals on the teams the AI brings, I’ve made something youcan play with. To understand what exactly is going on and get some intuition forit, read on.What they tried to doIt’s easiest to start with what the likely intended algorithm was. This ispurely to give a rough picture and provide a structure for all the details. Donot take everything in this section as gospel: some of it is just flat-outwrong. I will put an asterisk beside anything that is wrong on some level.The two Rival fights are of a different format than any other important fight inthe game so to make the rest of this post easier to word I’ll just state now howhe behaves. He always brings all three of his Pokémon, in Round 1 his lead israndom with an equal probability for each, and in Round 2 he always leads Lugia.First the game assigns a fitness value to each of its six Pokémon. Some trainersdo this by picking six independent* random values from 0 to 65535 inclusive.The majority do this by instead looking at each of your six Pokémon, computing amatchup fitness unaffected by the rest of your team* and then summing the sixobtained values. Each matchup fitness is based off the worst-case amount ofdamage you can do with the moves your Pokémon can learn*, the damage they cando to you with each of their moves, and some bonuses for status and other thingstheir moves can do. All of these are weighted with values specific to theopponent in question*.Next the game looks over all 20 possible teams of three. It is worth noting thatthe order of the members of each trio are just the order they appear in the teamof six. If the mode is Poké Cup, the game first rules out any team with a totallevel above 155. For specific trainers it will then rule out any teams that donot contain the first Pokémon of the six. For some others it will rule out thosethat do not contain the last. A few trainers, like Round 1 Erika, must bringboth.Some trainers are not allowed to bring both of their Pokémon with the highestfitness values. For determining what the best two are, earlier Pokémon takeprecedence in case of a tie. The game then randomly selects one of them toforbid, rather than only filtering off teams containing both. Some trainers mustalso bring a Pokémon from each column. As a fun aside, Round 1 Min &amp; Lyn havethis condition but must also bring Ledyba which locks them out of bringingHoppip.How the Pokémon are ordered, and what is meant by columnsFor each remaining valid trio, the game assigns a team fitness. To do this, itsimply sums the individual members’ fitness values and then applies multipliersfor weaknesses shared by multiple team members*. Then the game determines thebest eight teams according to their team fitness values (randomly choosing whichto keep in the event of a tie). Some opponents are more restrictive though, andonly take the best four teams. Out of these trios the game then selects one,assigning an equal probability* to them all.With the team selected the last thing the game must do is choose the lead. Someopponents just pick a random lead out of the three. Some opponents always gowith the first member of the trio. For the others, the game assigns to eachmember of the trio a lead fitness. This starts out at 0 for each member. 20 isadded for the Pokémon with the highest speed (ties broken randomly) and 30 iseither added or subtracted for the Pokémon with the highest fitness (ties brokenrandomly) depending on whether the opponent has a preference for leading withthe highest fitness Pokémon or keeping it in back. A final bonus is added forany Pokémon that has Baton Pass, the size of which depends on the opponent. Withthe lead fitness values assigned, the game picks the Pokémon with the highestlead fitness (again, breaking ties randomly) and swaps it with the first Pokémonof the trio.Needless to say all random decisions and values come from a PRNG that is verygood* and is initialised very well* and there are no significant and easilynoticeable restrictions or biases that result from this*.AI valuesAs mentioned above certain opponents have specific behaviour for which teamsthey allow and a bunch of weights giving how much they care about Baton Pass onleads, the damage you can do to them, and so on. So before going deep into thedetails of the calculations, here is that data.Individual fitness valuesThe calculation of the individual fitness values is easily the most involvedstep in the entire process and they are the means by which the player’s team caninfluence the AI’s team selection. As mentioned above some opponents just assignrandom fitness values which gives them a fixed probability distribution for teamselection regardless of the player’s team. For the rest though, there are anumber of steps (and mistakes…). The game computes six values for the matchupsof its Pokémon against each of your six Pokémon and then adds these together.These values are generally independent but a few bugs mean in theory there canoccasionally be an interaction.Step 1: damage you can doMost opponents don’t read your moves for team selection and consider all movesyour Pokémon could know at that level. Some do though, in which case they justgo over your moves. First though, note for this step the following moves areignored: Absorb, Beat Up, Bide, Dream Eater, Explosion, Fissure, Future Sight,Giga Drain, Guillotine, Horn Drill, Hyper Beam, Leech Life, Mega Drain, RazorWind, Selfdestruct, and Skull Bash. Moves with a power of 0 are also ignored.Moves that directly do damage like set damage moves are assigned a base powerof 1 to get around this, except for Guillotine which is assigned a base powerof 0.For moves not filtered out by the above, the game calculates how much damage themove would do against its Pokémon. Moves with variable power are treated ashaving the following power: Flail and Reversal: 60 Return and Frustration: the correct power for the friendship value Present: 52 Magnitude: 64 Hidden Power: 1, and treated as normal type.The OHKO moves (skipped due to the above, but will be important later) aretreated as doing 65535 damage, except for Guillotine which is counted as doing 0damage. Super Fang, Dragon Rage, SonicBoom, Night Shade, and Seismic Toss aretreated as doing the correct amount of damage. Psywave is treated as doingdamage equal to 0.75 * the user’s level. For other moves the standard damageformula applies, including the effects of Light Ball, Thick Club, and items thatboost moves of a specific type like Pink Bow and TwistedSpoon. However, therandom factor applied at the end of damage calculation is skipped and a maxdamage roll is assumed. Additionally, some opponents skip applying the effect ofSTAB and resistances/weaknesses.The maximum damage from these moves is then divided by the HP of the AI’sPokémon and scaled to lie between 0 and 255 inclusive (capping out at 255).Lastly some notes on how the AI determines if your Pokémon can learn a move. Itmostly goes the same as Challenge Cup, except egg moves and learning level-upmoves due to breeding only apply to Pokémon at least level 5. Additionally, somespecial event moves are considered, and these are: Fearow and Rapidash: Pay Day, minimum level 1 Pikachu and Raichu: Fly and Surf, minimum level 1 Psyduck and Golduck: Amnesia, minimum level 1 Farfetch’d: Baton Pass, minimum level 5 Magikarp: Dragon Rage, minimum level 1 Dratini: ExtremeSpeed, minimum level 15 Gligar: Earthquake, minimum level 5These also apply to evolutions in the same way as explained in theChallenge Cup post for typical moves.Oh, and there is one incredibly stupid bug worth mentioning, especially since asof writing I haven’t implemented it. The problem is when checking if yourPokémon learns a move it fails to properly initialise the level. Now once it’sgone into damage calculation for the first move, the level gets set correctlyfor the rest of the computation of that matchup’s value. This is part of whatstops it being too damaging.The other saving grace is that the game iterates over the moves in reverseorder. The last move is Beat Up, which is skipped anyway. The next two areWhirlpool and Rock Smash, and more than half of Pokémon learn at least one ofthese via HM which solves the problem for them. Hidden Power is a late move anda universal TM which also puts a cap on things quickly. In total, the moves thatcan be potentially missed that have an opportunity of being the best move are: Caterpie and Metapod: Tackle Weedle and Kakuna: Poison Sting Ekans and Arbok: Crunch Exeggcute and Exeggutor: AncientPower (often tied by Double-Edge, but notalways) Magikarp: Dragon Rage and Flail Unown: Hidden Power (remember it’s counted as Normal BP 1) Wobbuffet: Counter and Mirror Coat (remember they’re counted as BP 1) Larvitar and Pupitar: CrunchWorth noting that an uninitialised level might potentially have the oppositeeffect: a Pokémon potentially being seen as learning one of these moves when itshouldn’t be able to. In that connection should also be mentioned AncientPowerfor Larvitar and Pupitar: any one that can learn AncientPower can also learnRock Slide, but it is possible for a legal low-level Pupitar from Crystal to nothave access to either yet temporarily be thought of as level 30 or higher and sohave access to AncientPower.It seems that the uninitialised level always starts as zero, regardless of theorder of your team. I’ve not done an in-depth investigation of what happens tothe value, but I have played around with team order and seen that this doesn’taffect the calculation for Wobbuffet.Step 2: damage they can doThis is similar to the above, except the game works out the above for each ofthe AI’s moves and keeps them separate rather than just taking the maximum (seestep 4). The game also no longer skips moves like Giga Drain and Hyper Beam. Forthis calculation, Beat Up is treated as a typical Dark move with base power 10.Step 3: other things they can doHere the game comes up with a special bonus for each of the AI’s moves. This isbased off effects other than damage, and is affected by various weights each AIhas. In the following, note that the chance of the secondary effect activatingis a number from 0 to 255 rather than the more standard percentages.Moves that cause status (sleep, poison, burn, freeze, paralysis)The value is generally(28 * (AI weight for given status) * (chance of secondary effect)) / 255,rounded down. However the value is instead zero if the secondary chance cannothappen for type reasons. Tri Attack is ignored for this.Moves that raise the AI’s stats(2 * (AI weight for raising given stat) * (chance of secondary effect) * (stages raised)) / 255.Evasion is considered a stat for this. Attacks that can raise stats are countedas raising by two stages for some reason, except for AncientPower which iscounted as one stage but computes the above expression for the five stats it canraise and adds the results. Curse is ignored for this.Moves that lower the player’s statsThis is an absolute mess. The intent was clearly to do the same as the above butwith a bunch of weights for lowering stats. However, whoever coded that functionmixed up the order of the arguments for the stat to effect and the chance of asecondary effect, so as a result the game is accessing different memory andmultiplying by a number for the stat in question. The multiplier for the statsthus come to: Attack: 0 Defense: 1 Speed: 2 Special Attack: 3 (but no moves do this) Special Defense: 4 Accuracy: 5 Evasion: 6For the effect chance, there are five values and they come to the following: 10% moves: still falls within the AI data structure and so has anopponent-dependent value 20% moves: if this is the first of the AI’s Pokémon, 0. Otherwise the fitnessof the first Pokémon divided by 65536, rounded down, and then modulo 256 30% moves: if this is one of the first three of the AI’s Pokémon, 0. Otherwisethe fitness of the third Pokémon divided by 256, rounded down, and then modulo256 50% moves: 0 100% moves: 0It is worth noting that since the game is now multiplying by the stat ID inplace of the effect chance, the resulting value will be smaller. Nevertheless,my program takes account of this.Flinch movesThe same type of calculation as for status, except 0 if the attacker’s speed isnot greater and type matchup is ignored.Confusion movesThe same type of calculation as for status but type matchup is ignored. Swaggeris ignored.Attract, Baton Pass, Disable, Focus Energy, Light Screen, Mist, ReflectA fixed opponent-dependent value for each of the six moves in question, exceptfor Attract which is zero if the opponent’s Pokémon cannot infatuate theplayer’s Pokémon.Step 4: putting it togetherThe matchup’s value starts at zero. For each of the AI Pokémon’s four moves, thegame first takes the damage the move can do to the player, as a proportion outof 255. The game then multiplies this by 128, the accuracy for the move (as avalue from 0 to 255), the weight the AI assigns to damage it causes, thendivides by 255 and rounds down. Then the game takes any bonus for secondaryeffects calculated in step 3, multiplies by the move’s accuracy and a weightassigned to secondary effects, then again divides by 255 and rounds down. Asa third and final term the game takes the amount of damage the player can do ascalculated in step 1 and multiplies it by 58 and a weight assigned to damage bythe player. An exception to this is if the AI’s move is Selfdestruct orExplosion, in which case the AI instead treats the damage done by the player asmaximum for this one part.These three terms are then added together and that is added to the value. Notetherefore that the term for damage done by the player is typically multiplied by4 for the final result, excepting the cases of Selfdestruct and Explosion. Thisis true even if the AI’s Pokémon has less than four moves: for the empty movesslots, the terms for damage and secondary effects caused by the AI are zero butthere is still a deduction for damage done by the player.Penalty for resistances (yes, really)This calculation is truly amazing because there are three separate errors here.A note before going into it though: some opponents don’t do this part at all.The game loops over all attack types. Wait, sorry, that’s not right. Mistakeone: the game only loops over physical attack types. This is caused by therebeing at least two different numbering systems the game uses for types, andthere is a mismatch here.For each physical attack type, the game counts how many members of the trioare weak to resist that attack type. There’s mistake 2. If the team fitnessis positive, the game will multiply the team fitness with1 - 0.1 * (number of pairs that resist attack type). If the team fitness isnegative, the factor will instead be 1 + 0.1 * (number of pairs that resistattack type). Note that the number of pairs will be 0, 1, or 3.The last mistake is in the multiplication. The game does not multiply by, say,1.3 directly. It instead multiplies by 13 and then divides by 10, and similarlyfor any factor it will multiply by (factor * 10) and then divide by 10. Thismultiplication can cause an overflow. And this isn’t some nitpicky artificialscenario: this can happen and confused me for a good hour when it came up duringtesting. Specifically, it comes up in Werster’sComplete the Game PB against Chen in R1 Poké Cup GreatBall. The team Haunter / Spinarak / Misdreavus should be impossible with thatrental team, but the combined resistances factor is 2.4167 and the finalmultiplication by 13 is enough to cause the team fitness to overflow and becomepositive.How not to do randomnessI was initially planning to do a separate post on how Stadium 2’s PRNG is bad,but the problem is so pervasive in team selection that I feel this post would beincomplete without discussing it.The short version for people who know about such things is that Stadium 2 usesan LCG for this that returns all the bits of the seed withoutreordering them in any way. This is especially pernicious because most of thetime the game then takes the result modulo 2 or 8. The cherry on top is that thegame initialises this PRNG right before team generation with a value that is thebitwise and of two values that for most practical purposes are independent,horrifically skewing the distribution.For the rest of you, I won’t bore you with the maths behind LCGs since it’s notthat necessary to get the salient points. The most important consequence of thechoice of PRNG is that if the game generates a sequence of numbers that liebetween 0 and 7 inclusive, it will go in the following cycle:…, 0, 7, 2, 1, 4, 3, 6, 5, 0, 7, 2, 1, 4, 3, 6, 5, …This is because 8 is a power of two, and other powers of two have this property.The most common one that comes up here is 2, for when the game needs to decidebetween one of two options. This goes in a cycle of 0, 1, 0, 1, … and isrelated to the cycle for 8 by taking the remainder from division by 2.The importance of this cyclic behaviour is it creates strange relationshipsbetween random choices. The big one is in the choice of lead when the game hastwo options with equal highest lead fitness. Most of the time the AI has eightteams to pick from, so it picks one, and then the next number on the cycledetermines the choice of lead. If there’s a speed or fitness tie that comesup while computing the lead fitness values, this is also related so theconstraint is still there.It should be noted that if instead of a power of two the number is odd, then thechoice is not at all related but the cycle still goes one forward and so thereis still a relationship between random numbers before and after. This means thatfor trainers that just have a random lead, the lead can be treated asindependent of what comes before, or close enough. This also comes up fortrainers who have less than eight valid teams, often due to the combination ofnot using both of their highest fitness Pokémon and the Poké Cup level cap. Inthe case of six teams there’s some relationship: whether the result is odd oreven is determined by the position in the cycle, but beyond that it’s fairlyindependent.All of this is pretty constraining but I’ve saved the best for last. See, I’venot told you how the game determines where on the cycle to start and it makesthis decision right before going into team selection. And it does it absolutelyterribly. It takes the bitwise and of two independent random values, when thecombining operation you want is a bitwise xor. This means the starting valuesatisfies the following distribution: Starting value Probability 0 42.1875% 1 14.0625% 2 14.0625% 3 4.6875% 4 14.0625% 5 4.6875% 6 4.6875% 7 1.5625% This is why most opponents will massively favour a given trio (provided we fixthe player’s team). In the general case, we’re likely to start with 0. The gamethen moves one along to determine which of the two best Pokémon to ban (even ifthe opponent in question doesn’t care about that) generating the value of 7, orreally 1. Then assuming there’s no ties in total team fitness and there are atleast eight valid teams, it will generate the value of 2 and so pick the thirdbest team. Then if the opponent doesn’t just pick a random lead, the lead isdetermined by the position on the cycle.As a result if you’re trying to make one desired team the common team thenyou’re typically focusing on which team the game thinks is the third best ratherthan the best, which is rather counter-intuitive and practically impossible toguess just from playing the game. If the opponent doesn’t bring both of theirbest Pokémon and you have a specific Pokémon that you really don’t want to seethen you really want to steer them towards judging it as their second bestPokémon.Finally, the same problem happens with random values from 0 to 65535 since 65536is also a power of two. This means that for trainers with random fitness values,any one of the six fitness values determines the other five and generally theirteam selection. Also one of the two random values that are combined has twohigher bits set to zero which means the initial value in the cycle lies between0 and 16383 inclusive. But the next value is what is used as the first randomfitness, so the first fitness isn’t forced to be low." }, { "title": "Challenge Cup teams in Pokémon Stadium 2", "url": "/posts/challenge-cup/", "categories": "Pokémon Stadium 2", "tags": "", "date": "2022-01-09 12:34:30 +0000", "snippet": "It’s been a while, hasn’t it? I did have plans for having my next post be onDragon Ball Z: Budokai Tenkaichi 2, but then I decided that to dothat as well as I wanted I would first have to do one onDragon Ball Z: Budokai 3 and I quickly lost interest during myplaythrough of that.But enough excuses! Today we’re going to dive intoPokémon Stadium 2’s Challenge Cup mode. For the sake ofspecificity, this was worked out on the NTSC-U version of the game.OverviewPokémon Stadium 2 is a game principally focused on battling. There are variouscups, gyms, and a few other fights here and there. For most of them you get touse either your own Pokémon from the Game Boy and Game Boy Color games, or userentals the game provides you with.The Challenge Cup is special though, in that both you and your opponent haverandomised teams. There are four divisions, called Poké Ball, Great Ball, UltraBall, and Master Ball. Each division has their own pool of types of Pokémon thatcan be used, with higher divisions generally offering stronger species. There isalso a Round 2 mode to the game that unlocks after you finish all the battles,where you do everything again with harder opponents. In Round 2 the opponent’sPokémon have higher stats, and the randomly generated Pokémon have access to awider move pool.These randomly generated teams are going to be the focus of this post, both theplayer’s and the AI’s. I will just be describing the main ideas without caringabout the specific order the game actually makes all these decisions and callsthe RNG. If you want that level of detail, I have written a replica of how thegame does it which you can play with here. The repository ishere.Species selectionThe four divisions each have their own pool of allowed species. These are: Poké Ball Great Ball Ultra Ball Master Ball Bellsprout Abra Arbok Aerodactyl Bulbasaur Aipom Bellossom Alakazam Charmander Ariados Chansey Ampharos Chikorita Azumarill Charmeleon Arcanine Cleffa Bayleef Clefable Blastoise Cyndaquil Beedrill Dewgong Blissey Diglett Butterfree Dragonair Charizard Ditto Chinchou Dugtrio Cloyster Dratini Clefairy Fearow Crobat Drowzee Corsola Forretress Dodrio Ekans Croconaw Furret Donphan Exeggcute Cubone Girafarig Electabuzz Geodude Delibird Gligar Electrode Goldeen Doduo Golbat Espeon Grimer Dunsparce Granbull Exeggutor Hoothoot Eevee Haunter Feraligatr Hoppip Elekid Hitmonchan Flareon Horsea Farfetch’d Hitmonlee Gengar Igglybuff Flaaffy Hitmontop Golduck Jigglypuff Gastly Hypno Golem Krabby Gloom Jumpluff Gyarados Larvitar Graveler Kadabra Heracross Ledyba Growlithe Kingler Houndoom Machop Houndour Lanturn Jolteon Magnemite Ivysaur Magneton Jynx Mareep Kabuto Mantine Kabutops Marill Koffing Marowak Kangaskhan Nidoran♀ Ledian Misdreavus Kingdra Nidoran♂ Lickitung Mr. Mime Lapras Oddish Machoke Murkrow Machamp Paras Magby Noctowl Magmar Pichu Magcargo Octillery Meganium Pidgey Mankey Persian Miltank Pineco Meowth Pidgeot Muk Poliwag Natu Piloswine Nidoking Rattata Nidorina Ponyta Nidoqueen Remoraid Nidorino Pupitar Ninetales Sandshrew Omanyte Quagsire Omastar Seel Onix Quilava Pinsir Sentret Parasect Qwilfish Politoed Shellder Phanpy Raichu Poliwrath Slowpoke Pidgeotto Raticate Porygon2 Slugma Pikachu Sandslash Primeape Smeargle Poliwhirl Seadra Rapidash Snubbull Porygon Seaking Rhydon Spearow Psyduck Shuckle Scizor Spinarak Rhyhorn Skarmory Scyther Squirtle Skiploom Slowbro Snorlax Sunkern Smoochum Slowking Starmie Swinub Staryu Sneasel Steelix Togepi Teddiursa Stantler Tauros Totodile Tentacool Sudowoodo Tentacruel Tyrogue Togetic Sunflora Typhlosion Venonat Voltorb Tangela Umbreon Vulpix Wartortle Venomoth Ursaring Wooper Weepinbell Vileplume Vaporeon Zubat Wobbuffet Weezing Venusaur   Yanma Wigglytuff Victreebel       Xatu To select the species, the game starts with a template. A template is a list ofeither Pokémon types or wildcards. For the player, the game randomly selectsone of the following six templates: Electric / Ground / Water / * / * / * Electric / Fire / Water / * / * / * Rock / Grass / Water / * / * / * Electric / Ground / Flying / * / * / * Electric / Ground / Fire / * / * / * Rock / Fire / Grass / * / * / *Each opponent also has two templates (since you face each opponent in twodivisions), using the same templates in Round 1 and Round 2. These are: Poké Ball             Camper Marcus Fire Fire Ground Ground Ground Ground Rocket ♂ Poison Poison Poison Poison Poison Poison Picnicker Melissa Flying Flying Flying Flying * * Guitarist Daren Electric Electric Electric Grass Grass Grass Fisherman Curtis Water Water Water Water Water Water Medium Peggy Psychic Psychic Psychic * * * Rocket ♀ Normal Normal Normal Normal Normal Normal Juggle Dwight * * * * * * Great Ball             Twins Jan &amp; Jane Bug Bug Bug Bug * * Schoolboy Oliver Ground Ground Rock Rock Rock Rock Sailor Curt Ice Water Water Water Water * Swimmer♀ Darcy Normal Normal Normal Normal * * Officer Gerald Fire Fire Fire Grass Grass Grass Kimono Girl Emiko * * * * * * Scientist Roberto Dark Ghost Psychic Psychic * * Gentleman Travis * * * * * * Ultra Ball             Camper Marcus Fire Fire Ground Ground Ground * Rocket ♂ Poison Poison Poison Poison * * Picnicker Melissa Flying Flying Flying Flying Flying * Guitarist Daren Electric Electric Grass Grass * * Fisherman Curtis Water Water Water Water Water Water Medium Peggy Ghost Ghost Psychic Psychic Psychic * Rocket ♀ Normal Normal Normal Normal Normal Normal Juggle Dwight * * * * * * Master Ball             Twins Jan &amp; Jane Bug Bug Bug Flying Flying * Schoolboy Oliver Steel Ground Ground Ground Rock Rock Sailor Curt Ice Ice Water Water Water * Swimmer♀ Darcy Fighting Fighting Normal Normal Normal * Officer Gerald Fire Fire Fire Grass Grass Grass Kimono Girl Emiko * * * * * * Scientist Roberto Dark Ghost Psychic Psychic * * Gentleman Travis * * * * * * The game generates a Pokémon for each element of the template. To do this, itcreates a list of eligible Pokémon and then selects one at random. This is donein two steps.Firstly the game looks at the template element. If it is a type, the game takesall the Pokémon eligible for the division with that type that are not already inthe team. If it is a wildcard, the game takes all Pokémon eligible for thedivision that do not share a type with one already in the team. However, thereis something of note with this: if a Pokémon is dual-typed and doesn’t share atype with anything already in the team, it gets added to the list twice.The second step is done by the game to try and keep the base stat total average.The game looks at the average base stat total of the current team members androunds it down (if this is the first Pokémon so the team is empty, the averageis treated as 0). The game then divides the current list of candidates into twolists: one of Pokémon with a base stat total below the team average, and onewith those that have a total at least as great as the average.The game has target average base stat totals for each division, and these are280, 360, 447, and 507. These turn out to be the average base stat total for allPokémon eligible in each division, rounded to the nearest integer. The target isused to select which of the two lists to go with: if the target is below theteam average, it will go with the below average list, else it will go with theat least average list. However, if the list chosen this way turns out to beempty, it will fall back on the other non-empty list instead.From this it is clear some opponents will always have specific Pokémon becausethey ask for all of the eligible Pokémon with a given type. For example, inUltra Ball Peggy’s template asks for two Ghosts. The only Ghosts in Ultra Ballare Haunter and Misdreavus, so she will always have these.This type of thing can happen in a less obvious way as well though, like withRoberto in Great Ball. There is only one Dark and one Ghost in Great Ball, sohe will always have Houndour and Gastly. Up to this point his average base stattotal is thus 320. Now there are four eligible Psychics in Great Ball: Abra,Natu, Smoochum, and Wobbuffet. Only Natu and Wobbuffet have a base stat totalof at least 320. If the game gives him Natu for the first Psychic, then hisaverage will still be 320 so he will be forced to have Wobbuffet as his fourthteam member. Thus, no matter what, Great Ball Roberto will always haveWobbuffet.MovesDitto and Wobbuffet are special for move selection. Ditto always just hasTransform, and Wobbuffet always has Counter, Destiny Bond, Mirror Coat, andSafeguard. For every other Pokémon, the following happens.To decide the moves for each Pokémon, the game first creates a list of everymove the Pokémon can learn up to its level (which is 30, 45, 60, and 75 for thefour divisions) using the following procedure.If the Pokémon is Smeargle, it starts by adding every move except Baton Pass,Metronome, Mimic, Mirror Move, Sketch, Sleep Talk, Struggle, and Transform.Next, it will add every move the Pokémon can learn from level-up in Gold andSilver up to its level. If the Pokémon is unevolved and can hatch from an egg,it will treat its level as 100 for this check. Then all moves that it can learnfrom a TM or HM in Gold and Silver are added.If it is Round 2, the game will add additional moves to the learn pool. Theseare: egg moves, Crystal move tutor moves, Crystal level-up moves, RBY level-upmoves, and RBY TM and HM moves. Note this does not include some legal moves likeExtremeSpeed on Dratini and Amnesia on Psyduck.If the Pokémon is evolved, it will then repeat this procedure with itspre-evolution and add all the moves thus obtained. If the evolution is vialevel-up then the level will be decreased by 1 for this consideration, otherwiseit is unchanged. However for this purpose, Tyrogue’s evolutions are notconsidered as being by level-up.Next, the following moves are removed: Absorb, Bind, Bubble, Constrict, DreamEater, Fire Spin, Fissure, Frustration, Guillotine, Hidden Power, Horn Drill,Leech Life, Lick, Milk Drink, Moonlight, Morning Sun, Nightmare, Poison Sting,Rage, Rapid Spin, Recover, Rest, Return, Rock Smash, Sketch, Sleep Talk, Smog,Snore, Softboiled, SonicBoom, Splash, Struggle, Synthesis, Teleport, Whirlpool,and Wrap.Some opponents then have their own signature moves. These are: Fisherman Curtis: Rain Dance Guitarist Daren: Glare, Stun Spore, Thunder Wave Medium Peggy: Confuse Ray, Supersonic, Swagger, Sweet Kiss Officer Gerald: SolarBeam, Sunny Day Rocket ♀: Bite, Bone Club, Headbutt, Hyper Fang, Low Kick, Rock Slide, RollingKick Rocket ♂: Poison Gas (Poké Ball only), PoisonPowder (Poké Ball only), Toxic Schoolboy Oliver: Sandstorm Scientist Roberto: Double Team, Flash, Kinesis, Minimize, Sand-Attack,SmokeScreen, Sweet Scent Swimmer♀ Darcy: AttractAny signature moves for the opponent that are in the move pool are removed andadded to a special list. What remains is divided into four main classes of moves,whose members are given below.Good support moves: Acid Armor, Agility, Amnesia, Attract, Barrier, Belly Drum,Charm, Confuse Ray, Cotton Spore, Destiny Bond, Double Team, Growth, Haze, HealBell, Light Screen, Lock-On, Mind Reader, Perish Song, Rain Dance, Reflect,Safeguard, Sand-Attack, Scary Face, Screech, SmokeScreen, Spikes, Spore,Substitute, Sunny Day, Swagger, Sweet Scent, Swords Dance, Thunder Wave, ToxicBad support moves: Baton Pass, Conversion, Conversion 2, Curse, Defense Curl,Detect, Disable, Encore, Endure, Flash, Focus Energy, Foresight, Glare, Growl,Harden, Hypnosis, Kinesis, Leech Seed, Leer, Lovely Kiss, Mean Look, Meditate,Mimic, Minimize, Mirror Move, Mist, Pain Split, Poison Gas, PoisonPowder,Protect, Psych Up, Roar, Sandstorm, Sharpen, Sing, Sleep Powder, Spider Web,Spite, String Shot, Stun Spore, Supersonic, Sweet Kiss, Tail Whip, Transform,Whirlwind, WithdrawGood attacks: Aeroblast, AncientPower, Aurora Beam, Bite, Blizzard, Body Slam,Bonemerang, BubbleBeam, Crabhammer, Cross Chop, Crunch, Dig, Dizzy Punch,Double-Edge, DragonBreath, Drill Peck, Earthquake, Egg Bomb, Explosion,ExtremeSpeed, Faint Attack, Fire Blast, Fire Punch, Flame Wheel, Flamethrower,Fly, Giga Drain, Headbutt, Hi Jump Kick, Horn Attack, Hydro Pump, Hyper Beam,Hyper Fang, Ice Beam, Ice Punch, Icy Wind, Iron Tail, Jump Kick, Magnitude, MegaKick, Mega Punch, Megahorn, Metal Claw, Octazooka, Outrage, Petal Dance,Psybeam, Psychic, Razor Leaf, Rock Slide, Rollout, Sacred Fire, Selfdestruct,Shadow Ball, Slash, Sludge, Sludge Bomb, SolarBeam, Spark, Steel Wing, Stomp,Strength, Submission, Super Fang, Surf, Swift, Take Down, Thrash, Thunder,ThunderPunch, Thunderbolt, Tri Attack, Twineedle, Vital Throw, Waterfall, WingAttackBad attacks: Acid, AncientPower, Aurora Beam, Barrage, Beat Up, Bide, Bite,Bone Club, Bone Rush, Bonemerang, BubbleBeam, Clamp, Comet Punch, Confusion,Counter, Cut, Dig, Double Kick, DoubleSlap, DragonBreath, Dragon Rage,DynamicPunch, Egg Bomb, Ember, False Swipe, Faint Attack, Flail, Flame Wheel,Fury Attack, Fury Cutter, Fury Swipes, Future Sight, Gust, Horn Attack, HyperFang, Icy Wind, Jump Kick, Karate Chop, Low Kick, Mach Punch, Mega Drain, MegaKick, Mega Punch, Metal Claw, Metronome, Mirror Coat, Mud-Slap, Night Shade,Octazooka, Pay Day, Peck, Pin Missile, Pound, Powder Snow, Present, Psybeam,Psywave, Pursuit, Quick Attack, Razor Leaf, Razor Wind, Reversal, Rock Throw,Rolling Kick, Rollout, Scratch, Seismic Toss, Selfdestruct, Skull Bash, SkyAttack, Slam, Sludge, SolarBeam, Spark, Spike Cannon, Steel Wing, Stomp,Submission, Swift, Tackle, Take Down, Thief, ThunderShock, Triple Kick,Twineedle, Twister, Vine Whip, ViceGrip, Water Gun, Wing Attack, Zap CannonThere is some overlap between good attacks and bad attacks; anything in saidoverlap falls under both. Good and bad attacks are each further subdivided intofour groups: STAB attacks of the Pokémon’s first type, STAB attacks of thesecond type (if the Pokémon is dual-typed), non-STAB physical attacks, andnon-STAB special attacks.With this set up, the moves can now be decided. For the first move, the gamepicks a random element of a specific class of move, the first of the followingthat has any moves at all: Good STAB attack (if dual-typed, one of the non-empty lists at random) Bad STAB attack (if dual-typed, one of the non-empty lists at random) Good non-STAB attack (one of the non-empty lists at random) Bad non-STAB attack (one of the non-empty lists at random)After deciding the first move (and, in fact, after deciding the second and thirdmoves too) the game will first remove all copies of that move from all the listsso it cannot be selected again. Then it will look at the added move and see ifit is the first move of a combo. If so, it will add multiple copies of thesecond move of the combo to any lists said move is already in to make it morelikely. The combos and the number of copies added are as follows: First move Second move Copies Giga Drain Growth 3 Mega Drain Growth 3 Zap Cannon Lock-On 4 DynamicPunch Mind Reader 4 SolarBeam Sunny Day 3 Thunder Rain Dance 3 Outrage Safeguard 5 Thrash Safeguard 5 Petal Dance Safeguard 5 Rollout Defense Curl 7 Reversal Endure 7 Flail Endure 7 Perish Song Mean Look 7 Toxic Mean Look 7 Swagger Psych Up 7 There are two additional combos in the game that, due to a bug, are ignored:Toxic + Spider Web (7 copies) and Toxic + Pursuit (5 copies).For the second move, the game first checks if the Pokémon is dual-typed. If itis, the game tries to add a bad STAB attack of the type other than that of thefirst added move. If there are no such options, it proceeds to the usualprocedure.The usual procedure is to first combine the lists of good physical and specialnon-STAB attacks and remove the ones that have the same type as the first chosenmove. If this results in a non-empty list, a move is randomly selected from thislist. However if this list is empty, the game picks at random either the list ofgood non-STAB physical attacks or good non-STAB special attacks. If one isempty, it just picks the non-empty one. Then a move is selected at random fromthe chosen list.For the third move, the game first checks if any of the opponent’s signaturemoves are available. If so, it will pick one at random as the third move. Ifnot, and there are any good support moves, it will first select one at random.If the selected good support move is already on the team, it will do anotherrandom pick of a good support move and go with that. This can be the one justrejected, so it is still possible for a good support move to appear multipletimes on a team. If no good support moves are available, a random bad supportmove is chosen instead.For the final move, the game looks at the Pokémon’s base stats. If the baseattack is higher, the game will take all bad non-STAB physical attacks that arenot of the same type as one of the first two moves chosen. If the base specialattack is higher, bad non-STAB special attacks will be used instead. If they aretied, these lists are combined. The game then picks either this list or the listof available bad support moves at random (or goes with the non-empty one if oneis empty) and picks a random move from it.There is a subtle bug lurking here. The arrays containing the various types ofmoves are adjacent to one another, and are prefixed with their lengths. Thearrays are large enough for the initial population of moves each Pokémon canlearn, but they are not necessarily large enough to also fit in moves added dueto combos. The game will then write past the end of the array, and in theprocess overwrite the next array’s length. This means the game could, forinstance, pick Rain Dance as a bad support move due to the Thunder + Rain Dancecombo, or pick a move past the array’s end. If the value in memory there is 0,no move is chosen so a three move Smeargle is possible.Example from Werster, the Thunder + Rain Dance combo corrupted the next arrayHeld itemsWith the moves chosen, the next step is the held item. The game will do thebelow to decide a held item. If there is already a Pokémon on the team with thatheld item, it will try again and again until it gets one that isn’t.There is a 116/256 chance the game will go for one of the following berry items,chosen at random: Berry Juice, Bitter Berry, Burnt Berry, Gold Berry, Ice Berry,Mint Berry, MiracleBerry, MysteryBerry, PRZCureBerry, or PSNCureBerry. If theselection is PSNCureBerry and the Pokémon is Poison or Steel, the game triesagain as if a duplicate item were chosen. Similarly for Burnt Berry on Ice typesand Ice Berry on Fire types.There is an 89/256 chance the game will opt for the held item that boosts thepower of attacks with the same type as the first move by 10%. If the type isNormal, one of the Pink Bow or Polkadot Bow is chosen at random. If the type isDragon, one of the Dragon Fang or Dragon Scale is chosen at random. However ifthe first move is one of Counter, Dragon Rage, Mirror Coat, Night Shade, PainSplit, Psywave, Seismic Toss, or Super Fang, the game instead opts for theprevious option of a random berry item.There is a 38/256 chance the game will go for a random ‘hax item’, namely one ofBrightPowder, King’s Rock, Quick Claw, or Scope Lens.Lastly the remaining 13/256 chance is for a special species-exclusive item: Pikachu: Light Ball Farfetch’d: Stick Cubone/Marowak: Thick Club Chansey: Lucky Punch Ditto: Metal PowderIf the Pokémon is not one of these species, the game instead goes for a hax itemas above.After the held item is decided, the Pokémon’s moves are shuffled.Stats and miscellanyDVs are generated randomly. Due to how Generation II works, this means Attack,Defense, Special, and Speed DVs are each random numbers from 0 to 15, and HP isdetermined by these. Shininess is determined by DVs, as is gender.Shiny Pokémon have these sparkles, in case you think they’re commonStat experience is set differently for the player and the AI. For the player,all of a Pokémon’s stats’ stat experience is set to the same value, namely(680 - Base Stat Total) * 65535 / 500 rounded down. For the AI, the same statexperience spread is used for all of their Pokémon, and this is higher inRound 2. Generally this is the same value for all stats, but a few trainers havespeed stat experience set differently. Trainer Division Round One Stat Experience Round Two Stat Experience Camper Marcus Poké Ball 6400 9000 Rocket ♂ Poké Ball 12800 25600 Picnicker Melissa Poké Ball 6000 36000 Guitarist Daren Poké Ball 12800 28000 Fisherman Curtis Poké Ball 20000 58000, but 30000 speed Medium Peggy Poké Ball 12800 32000 Rocket ♀ Poké Ball 20000, but 51200 speed 55000, but 65535 speed Juggler Dwight Poké Ball 36000 65535 Twins Jan &amp; Jane Great Ball 6400 8000 Schoolboy Oliver Great Ball 11000 30000 Sailor Curt Great Ball 25600 35000 Swimmer♀ Darcy Great Ball 15000 27000 Officer Gerald Great Ball 20000 40000 Kimono Girl Emiko Great Ball 25600 50000 Scientist Roberto Great Ball 22000 45000 Gentleman Travis Great Ball 30000 60000 Camper Marcus Ultra Ball 3200 4500 Rocket ♂ Ultra Ball 6400 22000 Picnicker Melissa Ultra Ball 14000 35000 Guitarist Daren Ultra Ball 12000 30000 Fisherman Curtis Ultra Ball 16000 40000 Medium Peggy Ultra Ball 7500 28000 Rocket ♀ Ultra Ball 14000, but 40000 speed 35000, but 65535 speed Juggler Dwight Ultra Ball 25600 50000 Twins Jan &amp; Jane Master Ball 500 3200 Schoolboy Oliver Master Ball 7500 12800 Sailor Curt Master Ball 12800 20000 Swimmer♀ Darcy Master Ball 7500 18000 Officer Gerald Master Ball 14000 30000 Kimono Girl Emiko Master Ball 16000 35000 Scientist Roberto Master Ball 12800 33000 Gentleman Travis Master Ball 22400 47000 It might seem strange that higher division opponents tend to have lower statexperience, but bear in mind that the player will have less stat experience inhigher divisions due to its dependence on the base stat total.Friendship is a random value from 0 to 255 inclusive. While Return andFrustration are not possible to get in Challenge Cup, this can still come up dueto Metronome.Lastly Pikachu has a 1/256 chance of being a Talking Pikachu,which makes more anime-like sounds and is a result of using a Pikachu fromPokémon Yellow. Fun fact, a shiny Talking Pikachu is impossible in Challenge Cupdue to some weaknesses in the random number generation. But that rant is foranother post.After all of this, the team members are shuffled and the team is complete." }, { "title": "Friends in Yu-Gi-Oh! Nightmare Troubadour", "url": "/posts/ntr-friendship/", "categories": "Yu-Gi-Oh! Nightmare Troubadour", "tags": "", "date": "2021-07-19 18:32:02 +0100", "snippet": "This is the third and final post I plan to do onYu-Gi-Oh! Nightmare Troubadour. I may come back to it ata later date, but for now I’ve worked out everything I really wanted to know.Like the previous two posts, this work was done with the PAL version of thegame. I did check the trades in the NTSC-U version as well just to make sure onImperial Order, though.I’m not the first one to look into this aspect of the game. LancetJades onGameFAQs has a topic here where they dig into the same thingsthis post goes into. I independently found most of this, but their work on thedislike counter saved me some time trying to make heads or tails of that part.OverviewAs discussed in the previous post, Yu-Gi-Oh! NightmareTroubadour places the potential opponents on an overworld and the player musttrack them down. However, each duelist also has a friendship level. If thefriendship level is high enough, the duelist will offer to register you. Thiswill allow you to immediately duel them if they have spawned, and be able totell who they are.The jewel indicates Odion and Marik are registeredRegistering a duelist brings other benefits. It opens up the possibility forthem to give you their deck recipe (a listing of the cards contained in one oftheir decks) and to trade with them. Neglect a duelist too long though, and theywill deregister you.Making friendsFriendship is given by a non-negative two-byte value for each duelist. The gamedivides friendship into five grades, given by emoticons with differentbackground colours. These five grades are what the player can view in-game.Every duelist has their own values of friendship needed for each grade.Additionally, each duelist has a maximum friendship and if the maximumfriendship is not greater than a threshold (note: greater, not greater than orequal) then the game will not allow the duelist to reach that grade. This is howthe game keeps some duelists at the lowest grade permanently: Arkana, BanditKeith, Big 1, Big 2, Big 3, Big 4, Big 5, Gozaburo, Lumis, Noah, PaniK, RareHunter, Umbra, Yami Bakura, and Yami Marik. This is also how the game stops someduelists from reaching the maximum grade, namely Bonz, Dox, Ishizu Ishtar, Para,Seto Kaiba, Solomon, Strings, and Weevil.With that said, the table below contains the thresholds for each grade for theduelists not permanently stuck at zero friendship. Note for some duelists lowerthresholds are given as -, which means the duelist can not drop below thecorresponding grade. This table also includes the initial friendship of eachduelist (set when you first encounter them), the maximum friendship, and a ‘baseincrease’ value. Name :( :| :) X) Initial Maximum Base increase Yami Yugi - 200 1100 1400 450 1600 20 Yugi Muto - 200 1100 1400 450 1600 40 Joey Wheeler 100 400 1100 1400 550 1600 16 Seto Kaiba 200 600 1400 - 350 1600 20 Mokuba - 400 1200 1500 550 1800 30 Bakura - 300 1200 1400 450 1500 22 Tea Gardner - 200 1000 1300 450 1400 26 Mai Valentine 200 400 1100 1300 250 1400 12 Serenity - 200 1000 1200 550 1300 26 Rebecca 100 300 1100 1300 350 1500 16 Solomon - 200 1200 - 650 1400 24 Bonz - 200 1200 - 450 1400 18 Mako - 300 1100 1400 150 1600 36 Espa Roba 100 400 1100 1400 250 1600 14 Rex Raptor 200 500 1400 1600 250 1800 14 Weevil 300 900 1600 - 550 1800 18 Dox 100 400 1300 - 50 1500 26 Para 100 400 1300 - 50 1500 26 Pegasus - 200 900 1100 50 1300 26 Strings - 200 1200 - 50 1400 26 Odion - - 800 1100 500 1300 16 Ishizu Ishtar - 200 1100 - 450 1400 26 Marik Ishtar - - 900 1200 200 1500 26 The base increase value plays a role in how friendship increases. When you entera duel against an opponent, the game increases their friendship (note that sincethis happens upon entering a duel, whether you win or lose doesn’t matter). Theincrease is the sum of three numbers. The first is the duelist’s base increase.The second is the player’s level. The third is 50 if this is the player’s firstduel against that opponent that day, 25 if it’s the second that day, and 0 forsubsequent duels.There is a second way to increase friendship: accepting trades. Each duelist hasa value that is meant to give how much accepting a trade increases theirfriendship by. I have not given these values because they do not matter sinceeveryone in this game is a complete nutter.Accept the trade and she will be willing to die for youPresumably the code was meant to look something like this:increaseFriendship(opponentId, FriendshipData[opponentId - 1].increaseForTrade);Instead it looks like this:increaseFriendship(opponentId, friendshipLevel(opponentId) + FriendshipData[opponentId - 1].increaseForTrade);This means accepting a trade would at least double the duelist’s friendship. Butsince their friendship must be at least :) grade in order to offer a trade (moreon that later) and the threshold for :) grade is more than half the maximumfriendship for each duelist, it just maximises it instead.After a duel, if the duelist’s friendship is at least of :) grade, the gamechecks if a duelist is registered. If not, the game does a roll. If thefriendship is of :) grade, there is a 60% chance the duelist will offer toregister you. If the friendship is of X) grade, the duelist will always offer toregister you.Losing friendsLosing friendship is more complicated. There are three ways to decrease aduelist’s friendship: rejecting a duel offer, rejecting a trade offer, and goinga day without dueling them. But it’s not as simple as the friendship going downby some set value every time one of these happens. Each duelist has a ‘dislikecounter’ that acts as a buffer stopping them from immediately losing friendship.Relevant values are given in the table below. Name Threshold End of day Duel decline Trade decline Yami Yugi 180 10 4 2 Yugi Muto 180 10 4 2 Joey Wheeler 150 12 5 3 Seto Kaiba 130 12 5 3 Mokuba 120 12 5 3 Bakura 130 16 7 5 Tea Gardner 160 12 5 3 Mai Valentine 150 12 5 3 Serenity 130 10 4 2 Rebecca 130 14 6 3 Solomon 180 10 4 2 Bonz 150 12 5 3 Mako 180 10 4 2 Espa Roba 130 12 5 3 Rex Raptor 130 14 6 3 Weevil 130 14 6 3 Dox 130 14 6 3 Para 130 14 6 3 Pegasus 150 12 5 3 Strings 180 12 5 3 Odion 180 10 4 2 Ishizu Ishtar 160 12 5 3 Marik Ishtar 150 10 4 2 The dislike counter is reset whenever a player starts a duel against the duelistin question. When one of the three above actions occur, the game looks up thevalue for the given action and duelist. If the duelist is registered, this valueis halved. If the value was odd, the game rounds down. Since trades are onlyoffered to the player if the duelist is registered, this means that declining atrade always sets the dislike counter to one, except for Bakura for whom it getsset to two.Next the game looks at the dislike counter and compares it to a per-duelistthreshold. If the dislike counter meets or exceeds this threshold, the value issubtracted from the friendship. Otherwise the game first adds the value to thedislike counter. If after this addition the dislike counter meets or exceeds thethreshold, the new dislike counter value plus the value are subtracted from thefriendship and the duelist will deregister the player. Note this means that thefinal addition to the dislike counter is effectively taken off the friendshiptwice.Deck recipes and tradingIf the player has a duelist registered and the friendship is of :) grade orgreater, there is a chance the duelist will give you their deck recipe orpropose a trade. If the friendship is of :) grade, there is a 30% chance of thishappening. If the friendship is of X) grade, there is a 40% chance. Note thatthis means it is more difficult to get the deck recipe from and trade withduelists who max out at :) grade.If the game decides to do one of these, it first checks if the duelist can giveout their deck recipe. This is the case provided the player does not alreadyhave the deck recipe, and in three cases (Yami Yugi, Seto Kaiba, Marik Ishtar)also whether they have the corresponding god card (Slifer, Obelisk, Ra). It doesnot matter if they used a deck with the god card in it. Provided these checkspass, there is a 50% chance the game will award the player with the deck recipe.If this 50% fails, or the checks do not pass, the game will instead try topropose a trade.It is important to note there are two types of trades: random trades and fixedtrades. Each opponent has a pool of cards they would like and ones they arewilling to part with. In a random trade, the game selects a random card theopponent is willing to part with, and asks for a random card they’d like out ofthe ones the player is able to trade away (i.e. has at least one copy notcurrently in the deck, fusion deck, and probably side deck).Fixed trades are simpler: the opponent will ask for a specific card and offer aspecific card in return. Such a trade can only be proposed in the postgame afterYami Marik has been defeated, if the player has a copy they can trade away, andin the case where a god card is offered by the opponent, the opponent has saidgod card.If the AI has decided to try to propose a trade, it will look at the randomtrade cards the player can trade away and the fixed trades that are possible. Ifthere are no trades of either type, the game abandons the attempt. If there areonly available trades of one type, the game will offer that type. If there areavailable trades of both types, the game has a 50% chance of offering eithertype of trade.When the game decides to do a random trade, it will randomly select one of thecards the player is able to give away (each with equal probability, ignoringimperfections in the RNG and its utilisation), randomly select one of the cardsthe opponent is willing to part with, and then offer to trade those two cards.When the game decides to do a fixed trade, it takes the list of fixed tradesthat are allowed and randomly selects one.The list of cards each opponent will randomly request and offer, and their fixedtrades, have been placed in an XML file here. The trades are the samein the NTSC-U version.Note that Imperial Order is a postgame trade, so it is impossible to get it fromPegasus in the NTSC-U version." }, { "title": "NPC spawns in Yu-Gi-Oh! Nightmare Troubadour", "url": "/posts/ntr-npc-spawns/", "categories": "Yu-Gi-Oh! Nightmare Troubadour", "tags": "", "date": "2021-07-09 20:39:39 +0100", "snippet": "In the previous post we looked at the details of how packs workin Yu-Gi-Oh! Nightmare Troubadour. In this post we’regoing to look at how the game decides which NPCs to spawn, and a little abouthow the game places them on the map. Like the last post, this work was done onthe PAL version of the game. I did have a quick peek at the corresponding datafor the NTSC-U version though, because of the issue with Pegasus.OverviewYu-Gi-Oh! Nightmare Troubadour does not merely present the player with a listof opponents to duel at any time they wish. Instead, the opponents exist on anoverworld and must be found by the player. This can be seen as an evolution ofthe system introduced in Duel Monsters 6: Expert 2.Konami’s take on Hot and ColdThe player moves a cursor around the city they’re in (past a certain point theplayer unlocks a second city). The cursor starts as blue, but when it gets closeto an opponent it turns green. Closer still, it turns red. Finally when it’svery close the opponent will be detected and you have the option to face them.The amount of information you have on who an opponent is depends on details weneed not go into here.The opponents who have a chance of appearing depend on which of the two citiesthe player is in, what time of day it is (there is an in-game day/night cycle),and how far the player has progressed through the story. So first question, whocan appear and when?Who wants to play?Time in Nightmare Troubadour is a value from 0 to 255. The symbol the game usesfor time changes for each quarter of the day, but the game additionallysubdivides each quarter into four smaller quarters. The sixteenth of the dayaffects which opponents can spawn.The earliest time of each sixteenth of the dayProgress through the story is represented by two values, a stage and a substage.The stage goes from zero to ten; the substage’s range of values depends on thecurrent stage. I have not spent the time to work out the conditions that mustbe met to progress to the next stage or substage. Some educated guesses arepossible, and I suspect the simplest way to work out the troublesome ones wouldbe to experiment with savestates while looking at the relevant values. The stageis a two-byte value at 0x2097460, while the substage is the byte at 0x2097464.Using these values, the game builds the list of opponents that can spawn subjectto those conditions. I’ve put the data into this XML file.Each element has the time, stage, substage, and the city corresponding to thedata.The next important thing is the PRNG used. Like with packs, it’s an LCG, butit’s a different LCG. I have included an auxiliary method called randnumthat gives a procedure the game often uses to generate a random number from0 to upper_bound - 1 for some upper bound.class Prng: def __init__(self, seed): self.__seed = seed def rand(self): self.__seed = (0x41C64E6D * self.__seed + 0x3039) &amp; 0xFFFFFFFF return (self.__seed &gt;&gt; 16) &amp; 0x7FFF def randnum(self, upper_bound): return (self.rand() * upper_bound) // 32768It appears the game initialises the seed with the number of frames elapsed sincepower-on when the player clicks on Continue. I haven’t thoroughly tested it butit doesn’t appear to be called every frame or anything like that, so manipshould be very viable. Whether it’d be worthwhile is another matter.With the PRNG set up, the game looks at a base count for the number of opponentsto spawn. This only depends on the city, stage (not substage), and time, and isincluded in the XML as baseCount. The game generates a random number from 0 tobaseCount - 3, then adds 3, so it’s a random number from 3 to baseCount.This is with the exception of the case where baseCount is 2, in which case itis instead always 3. This random number is meant to be how many opponents thegame spawns.If the number of opponents to spawn is at least as great as the possible numberof opponents, the game spawns all of them. Otherwise it randomly selects thedesired amount out of the list of possible opponents. For this purpose, eachof the possible opponents comes with a ‘spawn rate’, and roughly speaking ahigher spawn rate means a higher chance of the opponent being selected. SomePython giving how the game goes about the selection is given below.def select_available_opponents(prng, opponent_list, base_count): # opponent_list is an array of (opponent_name, spawn_rate) count = prng.randnum(base_count - 2) + 3 if count &gt;= len(opponent_list): return [opp for opp, _ in opponent_list] opponents = [] # This copy is so we can safely modify the local list opponent_list = [x for x in opponent_list] total_spawn_rate = sum(prob for _, prob in opponent_list) while len(opponents) &lt; count: slot = prng.randnum(len(opponent_list)) while True: character, char_prob = opponent_list[slot] threshold = (char_prob * 100) // total_spawn_rate if prng.randnum(100) &lt; threshold: break slot = (slot + 1) % len(opponent_list) opponents.append(character) opponent_list = opponent_list[:slot] + opponent_list[slot+1:] return opponentsWhere shall we play?This is only half of the puzzle. Once the game has decided who to spawn, thegame then has to decide where on the map to place them. I have not worked outall the details of this process, but I have enough to be worth documenting.The game goes through the spawned opponents in order of their ID, rather thanthe order returned from the above procedure. This order can be inferred from theXML, where the available opponents start ordered by their ID. For each one, thegame generates a position for them. It does this by continually generatingrandom points until it finds one far enough away from all previously placedopponents, the player, and it seems any visible buildings on the map. Thisincludes the train station, card shop, the player’s home, the Duel Base, andprobably places like the location of the Expert Cup finalists party and thebuilding Serenity is taken to. There is an additional check on the generatedlocation, which I believe is how the game makes sure to not spawn opponents inthe middle of the sea.Poseidon does not care to duel youThe function that keeps generating a random point until a valid one is foundis called FUN_overlay_d_15__022630c0 by Ghidra, in case anyone wishes toinvestigate further.Loose ends: passersby and Shadow GamesI have not looked much into passersby or duelists who intercept you and forceyou into a Shadow Game, but it probably isn’t complicated. For passersby, itappears the game may add one after assigning a position to all spawned duelists,with a spawn rate of 0%, 20%, or 100%. If one is spawned, they are assigned aposition the same way duelists are.In the function that takes care of selecting which opponents to spawn, there isa branch for the case where the game wants to spawn an opponent to challenge youto a Shadow Game. It goes the same as select_available_opponents usually does,except count will always be one and not consult base_count.Here is a similar XML for such opponents.PegasusIt is well-known amongst players of Nightmare Troubadour that there is a bugpreventing Pegasus from spawning in the NTSC versions once Odion has beendefeated for the first time. This means that if not already obtained, the playeris locked out of Pegasus’ Deck Recipe. Furthermore, since Imperial Order is apostgame trade, it is impossible to obtain a copy legitimately with just anNTSC-U copy of the game.I had a quick glance at the corresponding code for the NTSC-U version and foundno relevant differences. However, there are differences in the data giving whichopponents can spawn and therein lies the answer. I have placed the NTSC-U datahere for convenience. The only difference is Pegasus is notlisted as spawning in stage ten at all, and in any city/time/substagecombination in which he spawns in stage ten, he is removed and baseCount isone lower. As a curious consequence, note that this still means that he is notpresent for stage nine, which is probably from after the player first defeatsOdion up until Yami Marik is defeated.There is no difference in the data for opponents who intercept the player andforce them into a Shadow Game." }, { "title": "Packs in Yu-Gi-Oh! Nightmare Troubadour", "url": "/posts/ntr-packs/", "categories": "Yu-Gi-Oh! Nightmare Troubadour", "tags": "", "date": "2021-06-24 22:47:35 +0100", "snippet": "Yu-Gi-Oh! Nightmare Troubadour is the first Yu-Gi-Oh!game for the Nintendo DS. I don’t consider it to be especially good, and unlessyou’re dying for a Yu-Gi-Oh! game with the original cast, I’d suggest giving ita miss. However, it will forever hold a special place in my heart as it, alongwith Sonic Rush, were the two games I got with my DS one Christmas day.I had occasion to replay it recently forRetroAchievements. And it annoyed me that there’s still alot of things not well understood about the game. So naturally, now that myplaythrough is complete, it’s the perfect time to solve some of those mysteries.After that knowledge could have helped me.This will be the first of a few planned posts wherein I dig into some of thosemysteries. My first post will be on how packs work.My research will be done with the PAL version of the game, because that’s theversion I played for RetroAchievements so I already have a complete save.OverviewYu-Gi-Oh! Nightmare Troubadour is based off the Yu-Gi-Oh! card game. You accruecards by purchasing packs from the shop (there are a few other means, but theyaren’t relevant for our purposes). Each pack contains five cards. The first fourwill always be common cards. The last will be a common, a rare, a super rare,or an ultra rare.The three gendersEvery in-game day the player can purchase up to 10 packs of each type ofbooster. Every box of 10 contains one pack with an ultra rare, two packs with asuper rare, three packs with a rare, and four packs with all commons. Along-known interesting fact about the distribution of rares is that you can savethe game after buying a single pack, and the distribution of the packs withrares are fixed until the next in-game day.A new day, a new 10 packsThe RNG, and distribution of raresSo hey, the issue with the rares sounds interesting. Let’s see how the gamedetermines them. To generate random numbers for pack pulls, the game uses alinear congruential generator, or LCG for short. The game keepsa 32-bit number called a seed. Every time the game requires a new random number,the game first changes the seed according to a mathematical transformation, thenextracts the desired number from the seed. In Python, it would look like this:class Prng: def __init__(self, seed): self.__seed = seed def rand(self): self.__seed = (0x343FD * self.__seed + 0x269EC3) &amp; 0xFFFFFFFF return (self.__seed &gt;&gt; 16) &amp; 0x7FFFTo use an LCG, you must first supply an initial seed value. If we can learn(or better still, control) said initial seed value, and control when the gamerequests a random number, we will be able to predict all output of the randomnumber generator, thereby controlling what cards we get from packs. Therefore,the next important issue is how the game chooses the initial seed value and whenthe game requests a random number.The game takes the number of frames that have elapsed since power-on, as a16-bit number, and uses that as the initial seed value. This happens when theplayer enters the menu where they select the booster they wish to buy packs of.The RNG is initialised in the black screen right after thisThe first time in an in-game day the player enters this menu, right afterinitialising the LCG the game will use it to determine which packs containrares, super rares, and ultra rares. The only other time the game will requestrandom numbers is when opening a pack. The procedure the game uses to allocatethe distribution of rares is as follows:def generate_rare_slots(rng): # 4 for Ultra Rare, 3 for Super Rare, 1 for Rare, 0 for Common rares = [4, 3, 3, 1, 1, 1, 0, 0, 0, 0] rare_slots = [] # The game has 20 types of booster for _ in range(20): pack_rare_slots = [-1] * 10 for rare in rares: while True: slot = rng.rand() % 10 if pack_rare_slots[slot] == -1: pack_rare_slots[slot] = rare break rare_slots.append(pack_rare_slots) return rare_slotsThis is as close to a best-case scenario for manipulating the packs as we couldreasonably hope for. If we do one frame-perfect input, we have perfect knowledgeof the RNG’s output. Additionally, if you don’t even want to do that, there areonly 65536 starting seeds so after buying one pack we will almost definitely beable to work out what the initial seed was, and what it will be going forward.That means we just need to know how the game uses the RNG to generate thecontents of pack, but unfortunately that is somewhat more complicated.Pack contentsThe main complication comes from the fact that the developers decided to add afeature where the player does not spend an eternity getting the last rares theyneed. Say a pack has three potential ultra rare cards it can give you, and youalready own one of them. If a pack is determined to contain an ultra rare, undernormal circumstances you will have a one in three chance of getting any of them.However, if the player has opened two or more packs from that booster containingan ultra rare, and both of them gave ultra rares that the player owned beforeopening said packs, then the game will ensure the player gets an ultra rare theyhave not already obtained. In our hypothetical scenario, this would mean theplayer has a one in two chance of getting either unowned ultra rare, and nochance of getting the one they already own. This works in the same way for raresand super rares.With that explanation out of the way, here is how it works:def generate_pulls(pack_data, rng, rarity, guarantee_new, unowned_rares): \"\"\"Calculate the pulls from a pack. pack_data: an array of pairs of the form (card, rarity) for the pack's cards rng: the RNG rarity: 0 for common, 1 for rare, 3 for super rare, 4 for ultra rare guarantee_new: if the game tries to guarantee a new rare due to 2+ old ones unowned_rares: the rares from pack_data that are unowned \"\"\" if rarity == 0: common_count = 5 else: common_count = 4 pulls = [] while len(pulls) &lt; common_count: slot = rng.rand() % len(pack_data) new_card, nc_rarity = pack_data[slot] if new_card in pulls: continue if nc_rarity != 0: continue pulls.append(new_card) if rarity == 0: return pulls rare_pool = [c for c, r in unowned_rares if r == rarity] if rare_pool and guarantee_new: slot = rng.rand() % len(rare_pool) pulls.append(rare_pool[slot]) return pulls while True: slot = rng.rand() % len(pack_data) new_card, nc_rarity = pack_data[slot] if nc_rarity == rarity: pulls.append(new_card) return pullsI have placed the contents of the packs into an XML here. Order isimportant, so listings from GameFAQs and the like are of no use here.To generate a card from an array, the game requests a random number from the LCGand then does modulo the length of the array, and takes the corresponding item.With this procedure, the game will generate a card and keep doing so until itgets a common. This common is then placed as the first card. The game will usethis process to get another common, adding it if the game has not alreadydecided to give the player that card. This is repeated until all the commons aredone. If the pack is five commons, the generation is over.If not, the procedure for the rare card depends on whether the new rareguarantee if active. If it is active, the game will generate the array of cardsin the pack that are unowned and of the right rarity, in the same order thepack’s contents are in. If this array is non-empty, the game will pick a randomelement from this array for the rare. If this array is empty, the game will fallback on the procedure used when the new rare is not guarantee. Said procedure isto keep generating random cards from the full array, like with commons, untilone of the right rarity is found." }, { "title": "Hello World!", "url": "/posts/first-post/", "categories": "", "tags": "", "date": "2021-06-16 19:23:15 +0100", "snippet": "I’ve finally decided to make a blog. The primary motivation is that I want aplace to dump write-ups about interesting things I find in video games, andcurrently I tend to just keep the information as personal notes on my computer,dump it to my pastebin account, or share it with one or twopeople. I’d much rather have the information public and easily accessible, sothis is what I’ve decided to try. As a bonus over pastebin, I get to use themagic of formatting.The secondary motivation is it provides an excuse to hone two skills: writingand web-dev. Nobody regretted getting better at writing, and reading aboutweb-dev is boring if I have nothing to apply it to. I’m not sure how much thisblog will help with the latter, but we’ll see how it goes. And at any rate, Ican always migrate down the line if need be.I don’t have any plans on regular posts, I expect to just write something whenI have something to say. Maybe I’ll look into some things inYu-Gi-Oh! Nightmare Troubadour to start this off. Weshall see." } ]
